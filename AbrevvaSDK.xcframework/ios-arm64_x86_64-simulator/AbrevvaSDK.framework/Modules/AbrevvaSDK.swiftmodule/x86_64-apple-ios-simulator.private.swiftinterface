// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target x86_64-apple-ios15.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature AccessLevelOnImport -enable-bare-slash-regex -module-name AbrevvaSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import CoreBluetooth
import CryptoKit
import Foundation
import Security
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_inheritsConvenienceInitializers public class HKDFWrapper : ObjectiveC.NSObject {
  public func derive(key: [Swift.UInt8], salt: [Swift.UInt8], info: [Swift.UInt8], length: Swift.Int) -> [Swift.UInt8]
  @objc override dynamic public init()
  @objc deinit
}
public enum DisengageStatusType : Swift.String {
  case ERROR
  case AUTHORIZED
  case AUTHORIZED_PERMANENT_ENGAGE
  case AUTHORIZED_PERMANENT_DISENGAGE
  case AUTHORIZED_BATTERY_LOW
  case AUTHORIZED_OFFLINE
  case UNAUTHORIZED
  case UNAUTHORIZED_OFFLINE
  case SIGNAL_LOCALIZATION
  case MEDIUM_DEFECT_ONLINE
  case MEDIUM_BLACKLISTED
  case UNKNOWN_STATUS_CODE
  case UNABLE_TO_CONNECT
  case TIMEOUT
  case UNABLE_TO_SET_NOTIFICATIONS
  case UNABLE_TO_READ_CHALLENGE
  case ACCESS_CIPHER_ERROR
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class AesGcm : ObjectiveC.NSObject {
  public func decryptFile(key: [Swift.UInt8], data: Foundation.Data, pathPt: Swift.String) -> Swift.Bool
  public func encryptFile(key: [Swift.UInt8], pathPt: Swift.String, pathCt: Swift.String) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class SimpleSecureRandom : ObjectiveC.NSObject {
  public func random(_ numBytes: Swift.Int) -> [Swift.UInt8]
  @objc override dynamic public init()
  @objc deinit
}
public func descriptorValueToString(_ value: Any) -> Swift.String
public func dataToString(_ data: Foundation.Data) -> Swift.String
public func stringToData(_ dataString: Swift.String) -> Foundation.Data
public func CBUUIDToString(_ uuid: CoreBluetooth.CBUUID) -> Swift.String
public func CBUUIDToStringUppercase(_ uuid: CoreBluetooth.CBUUID) -> Swift.String
public struct BleDeviceAdvertisementData {
  public init(rssi: Swift.Int, isConnectable: Swift.Bool? = nil, manufacturerData: AbrevvaSDK.BleDeviceManufacturerData? = nil, rawData: [Swift.String : Any]? = nil)
  public let rssi: Swift.Int
  public let isConnectable: Swift.Bool?
  public let manufacturerData: AbrevvaSDK.BleDeviceManufacturerData?
  public let rawData: [Swift.String : Any]?
}
public struct BleDeviceManufacturerData : Swift.Equatable {
  public init(companyIdentifier: Swift.UInt16, version: Swift.UInt8, componentType: Swift.UInt8, mainFirmwareVersionMajor: Swift.UInt8, mainFirmwareVersionMinor: Swift.UInt8, mainFirmwareVersionPatch: Swift.UInt16, componentHAL: Swift.Int, batteryStatus: Swift.Bool, mainConstructionMode: Swift.Bool, subConstructionMode: Swift.Bool, isOnline: Swift.Bool, officeModeEnabled: Swift.Bool, twoFactorRequired: Swift.Bool, officeModeActive: Swift.Bool, reservedBits: Swift.Int?, identifier: Swift.String, subFirmwareVersionMajor: Swift.UInt8?, subFirmwareVersionMinor: Swift.UInt8?, subFirmwareVersionPatch: Swift.UInt16?, subComponentIdentifier: Swift.String?)
  public let companyIdentifier: Swift.UInt16
  public let version: Swift.UInt8
  public let componentType: Swift.UInt8
  public let mainFirmwareVersionMajor: Swift.UInt8
  public let mainFirmwareVersionMinor: Swift.UInt8
  public let mainFirmwareVersionPatch: Swift.UInt16
  public let componentHAL: Swift.Int
  public let batteryStatus: Swift.Bool
  public let mainConstructionMode: Swift.Bool
  public let subConstructionMode: Swift.Bool
  public let isOnline: Swift.Bool
  public let officeModeEnabled: Swift.Bool
  public let twoFactorRequired: Swift.Bool
  public let officeModeActive: Swift.Bool
  public let reservedBits: Swift.Int?
  public let identifier: Swift.String
  public let subFirmwareVersionMajor: Swift.UInt8?
  public let subFirmwareVersionMinor: Swift.UInt8?
  public let subFirmwareVersionPatch: Swift.UInt16?
  public let subComponentIdentifier: Swift.String?
  public static func == (a: AbrevvaSDK.BleDeviceManufacturerData, b: AbrevvaSDK.BleDeviceManufacturerData) -> Swift.Bool
}
public enum ManufacturerDataError : Swift.Error {
  case NoAdvertisementData
  case InvalidManufacturerDataLength
  case ParsingError
  public static func == (a: AbrevvaSDK.ManufacturerDataError, b: AbrevvaSDK.ManufacturerDataError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc public class BleDevice : ObjectiveC.NSObject, CoreBluetooth.CBPeripheralDelegate {
  public typealias NotifyCallback = (_ value: Foundation.Data?) -> Swift.Void
  public var address: Swift.String {
    get
  }
  public var localName: Swift.String? {
    get
  }
  public var advertisementData: AbrevvaSDK.BleDeviceAdvertisementData? {
    get
  }
  public init(_ peripheral: CoreBluetooth.CBPeripheral, advertisementData: [Swift.String : Any]? = nil, rssi: Swift.Int)
  public func getName() -> Swift.String?
  public func getAddress() -> Swift.String
  public func getPeripheral() -> CoreBluetooth.CBPeripheral
  public func isConnected() -> Swift.Bool
  public func discoverServices(_ timeout: Swift.Int? = nil) async -> Swift.Bool
  public func read(_ serviceUUID: CoreBluetooth.CBUUID, _ characteristicUUID: CoreBluetooth.CBUUID, _ timeout: Swift.Int? = nil) async -> Foundation.Data?
  public func write(_ serviceUUID: CoreBluetooth.CBUUID, _ characteristicUUID: CoreBluetooth.CBUUID, _ data: Foundation.Data, _ writeType: CoreBluetooth.CBCharacteristicWriteType, _ timeout: Swift.Int? = nil) async -> Swift.Bool
  public func setNotifications(_ serviceUUID: CoreBluetooth.CBUUID, _ characteristicUUID: CoreBluetooth.CBUUID, _ enable: Swift.Bool, _ notifyCallback: AbrevvaSDK.BleDevice.NotifyCallback?, _ timeout: Swift.Int? = nil) async -> Swift.Bool
  @objc public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverServices error: (any Swift.Error)?)
  @objc public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverCharacteristicsFor service: CoreBluetooth.CBService, error _: (any Swift.Error)?)
  @objc public func peripheral(_: CoreBluetooth.CBPeripheral, didDiscoverDescriptorsFor characteristic: CoreBluetooth.CBCharacteristic, error _: (any Swift.Error)?)
  @objc public func peripheral(_: CoreBluetooth.CBPeripheral, didUpdateValueFor characteristic: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
  @objc public func peripheral(_: CoreBluetooth.CBPeripheral, didWriteValueFor _: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
  @objc public func peripheral(_: CoreBluetooth.CBPeripheral, didUpdateNotificationStateFor characteristic: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
  @objc deinit
}
@objc public class BleManager : ObjectiveC.NSObject, CoreBluetooth.CBCentralManagerDelegate {
  public typealias InitCallback = (_ success: Swift.Bool, _ message: Swift.String?) -> Swift.Void
  public typealias StateReceiverCallback = (_ enabled: Swift.Bool) -> Swift.Void
  public typealias ScanStartCallback = (_ error: (any Swift.Error)?) -> Swift.Void
  public typealias ScanStopCallback = (_ error: (any Swift.Error)?) -> Swift.Void
  public typealias ScanResultCallback = (_ device: AbrevvaSDK.BleDevice) -> Swift.Void
  public typealias ConnectCallback = (_ address: Swift.String) -> Swift.Void
  public typealias DisconnectCallback = (_ address: Swift.String) -> Swift.Void
  public init(_ onInit: AbrevvaSDK.BleManager.InitCallback? = nil)
  public func getDevice(_ deviceID: Swift.String) -> AbrevvaSDK.BleDevice?
  public func setCentralManager(_ centralManager: CoreBluetooth.CBCentralManager)
  public func isBleEnabled() -> Swift.Bool
  public func startScan(_ onScanResult: @escaping AbrevvaSDK.BleManager.ScanResultCallback, _ onScanStart: AbrevvaSDK.BleManager.ScanStartCallback? = nil, _ onScanStop: AbrevvaSDK.BleManager.ScanStopCallback? = nil, _ macFilter: Swift.String? = nil, _ allowDuplicates: Swift.Bool = false, _ timeout: Swift.Int? = nil)
  public func stopScan()
  public func connect(_ device: AbrevvaSDK.BleDevice, _ onDisconnect: AbrevvaSDK.BleManager.DisconnectCallback? = nil, _ timeout: Swift.Int? = nil) async -> Swift.Bool
  @discardableResult
  public func disconnect(_ device: AbrevvaSDK.BleDevice) async -> Swift.Bool
  public func signalize(_ device: AbrevvaSDK.BleDevice) async -> Swift.Bool
  public func disengage(_ device: AbrevvaSDK.BleDevice, _ mobileID: Swift.String, _ mobileDeviceKey: Swift.String, _ mobileGroupID: Swift.String, _ mediumAccessData: Swift.String, _ isPermanentRelease: Swift.Bool) async -> AbrevvaSDK.DisengageStatusType
  public func registerStateReceiver(_ stateReceiver: @escaping AbrevvaSDK.BleManager.StateReceiverCallback)
  public func unregisterStateReceiver()
  public func emitState(enabled: Swift.Bool)
  @objc public func centralManager(_: CoreBluetooth.CBCentralManager, didConnect peripheral: CoreBluetooth.CBPeripheral)
  @objc public func centralManager(_: CoreBluetooth.CBCentralManager, didFailToConnect peripheral: CoreBluetooth.CBPeripheral, error: (any Swift.Error)?)
  @objc public func centralManager(_: CoreBluetooth.CBCentralManager, didDisconnectPeripheral peripheral: CoreBluetooth.CBPeripheral, error: (any Swift.Error)?)
  @objc public func centralManager(_: CoreBluetooth.CBCentralManager, didDiscover peripheral: CoreBluetooth.CBPeripheral, advertisementData: [Swift.String : Any], rssi RSSI: Foundation.NSNumber)
  @objc public func centralManagerDidUpdateState(_ central: CoreBluetooth.CBCentralManager)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class X25519 : ObjectiveC.NSObject {
  public func generateKeyPair() -> [Foundation.Data]
  public func computeSharedSecret(privateKeyData: Foundation.Data, publicKeyData: Foundation.Data) -> Foundation.Data?
  public func computeED25519PublicKey(privateKeyData: Foundation.Data) -> Foundation.Data?
  public func sign(privateKeyData: Foundation.Data, data: Foundation.Data) -> Foundation.Data?
  public func verify(publicKeyData: Foundation.Data, data: Foundation.Data, signature: Foundation.Data) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AesCcm : ObjectiveC.NSObject {
  public func encrypt(key: [Swift.UInt8], iv: [Swift.UInt8], adata: [Swift.UInt8], pt: [Swift.UInt8], tagLength: Swift.Int) -> [Swift.UInt8]
  public func decrypt(key: [Swift.UInt8], iv: [Swift.UInt8], adata: [Swift.UInt8], ct: [Swift.UInt8], tagLength: Swift.Int) -> [Swift.UInt8]
  @objc override dynamic public init()
  @objc deinit
}
extension Swift.UInt16 {
  public enum UInt16Error : Swift.Error {
    case IndexOutOfBounds
    case bitRangeStartCantBeBiggerThanEnd
    public static func == (a: Swift.UInt16.UInt16Error, b: Swift.UInt16.UInt16Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func bit(_ index: Swift.Int) throws -> Swift.Int
  public func bitRange(_ indexStart: Swift.Int, _ indexEnd: Swift.Int) throws -> Swift.Int
  public static func combine(_ byte1: Swift.UInt8?, _ byte2: Swift.UInt8?) -> Swift.UInt16
}
extension AbrevvaSDK.DisengageStatusType : Swift.Equatable {}
extension AbrevvaSDK.DisengageStatusType : Swift.Hashable {}
extension AbrevvaSDK.DisengageStatusType : Swift.RawRepresentable {}
extension AbrevvaSDK.ManufacturerDataError : Swift.Equatable {}
extension AbrevvaSDK.ManufacturerDataError : Swift.Hashable {}
extension Swift.UInt16.UInt16Error : Swift.Equatable {}
extension Swift.UInt16.UInt16Error : Swift.Hashable {}
